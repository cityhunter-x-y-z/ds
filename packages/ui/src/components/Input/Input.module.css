/* =========================================
   INPUT STYLES - SCALABLE DESIGN SYSTEM
   File: packages/ui/src/components/Input/Input.module.css
   Based on design tokens from theme.css - NO HARDCODED VALUES
   ========================================= */

/* Import design tokens */
@import '@gazebo/tokens/src/theme.css';

/* =====  FIGMA-BASED CONTAINER STRUCTURE ===== */

/* Container - Main wrapper (matches Figma frame structure) */
.container {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%;
  gap: var(--inputfield-divl1-gap, 8px);
}

/* Input Wrapper - The bordered container (matches Figma input frame) */
.inputWrapper {
  position: relative;
  display: flex;
  align-items: center;
  align-self: stretch;
  
  /* Using design tokens */
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border: var(--inputfield-divl2-stroke-thickness, 1px) solid var(--inputfield-static-default-border, #98A2B3);
  border-radius: var(--inputfield-divl2-corner-radius, 4px);
  
  /* Layout from design tokens */
  gap: var(--inputfield-divl3-gap, 12px);
  padding: var(--inputfield-divl3-vertical-padding, 12px) var(--inputfield-divl3-horizontal-padding, 16px);
  
  /* Base properties */
  box-sizing: border-box;
  overflow: hidden;
  min-width: 0;
  
  /* Smooth transitions */
  transition: all var(--transition-fast, 0.2s) ease;
  
  /* Remove focus outline from wrapper */
  outline: none;
}

/* Content Container - Houses the actual input and icons */
.contentContainer {
  position: relative;
  display: flex;
  align-items: center;
  align-self: stretch;
  flex: 1 0 0;
  gap: var(--inputfield-divl3-gap, 12px);
  
  /* No additional styling - wrapper handles all visual aspects */
  background: transparent;
  border: none;
  border-radius: 0;
  outline: none;
}

/* =====  INPUT ELEMENT STYLES ===== */

/* The actual input element - uses design tokens for typography */
.input {
  display: flex;
  align-items: center;
  flex: 1 0 0;
  
  /* Remove all default styling */
  border: none;
  outline: none;
  background: transparent;
  
  /* Typography from design tokens */
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: var(--body-size, 14px);
  font-weight: var(--body-weight-regular, 400);
  line-height: var(--body-lineheight, 1.3229999542236328em);
  letter-spacing: var(--body-letterspacing, -0.15px);
  color: var(--text-neutral-extreme, #101828);
  
  /* Layout */
  box-sizing: border-box;
  width: 100%;
  margin: 0;
  padding: 0;
}

.input::placeholder {
  color: var(--inputfield-static-default-placeholdertext, #98A2B3);
  opacity: 1;
}

/* Focus state placeholder color change */
.input:focus::placeholder {
  color: var(--inputfield-interactive-placeholdertext-onfocus, #D0D5DD);
}

/* =====  SIZE VARIANTS ===== */

/* Medium size (default) */
.inputMd {
  font-size: var(--body-size, 14px);
}

.containerMd .inputWrapper {
  min-height: var(--inputfield-height, 44px);
}

/* Large size */
.inputLg {
  font-size: var(--body-size, 14px);
}

.containerLg .inputWrapper {
  min-height: var(--global-size-8, 48px);
  padding: var(--inputfield-divl3-vertical-paddinglg, 14px) var(--inputfield-divl3-horizontal-padding, 16px);
}

/* =====  STATE STYLES ===== */

/* Default State */
.default .inputWrapper,
.containerDefault .inputWrapper {
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border-color: var(--inputfield-static-default-border, #98A2B3);
  color: var(--text-neutral-extreme, #101828);
}

/* Focus State - CORRECTED: Using exact Figma box-shadow order */
.focus .inputWrapper,
.containerFocus .inputWrapper,
.inputWrapper:has(.input:focus) {
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border-color: var(--inputfield-interactive-border-onfocus, #344054);
  /* Correct box-shadow order from Figma - NO GRADIENT EFFECT */
  box-shadow: 
    0px 0px 0px 1.5px #FFF,
    0px 0px 0px 3px #2E90FA,
    0px 1px 3px 2px #FFF,
    0px 1px 2px 0px #E9EBED;
}

/* Focus state icon color change */
.focus .icon,
.containerFocus .icon,
.inputWrapper:has(.input:focus) .icon {
  color: var(--inputfield-interactive-icon-onfocus, #344054);
}

/* Hover State */
.hover .inputWrapper:hover:not(:has(.input:focus)),
.containerHover .inputWrapper:hover:not(:has(.input:focus)) {
  background: var(--inputfield-interactive-surface-onhover, #FFFFFF);
  border-color: var(--inputfield-static-default-border, #98A2B3);
}

/* Error State */
.error .inputWrapper,
.containerError .inputWrapper {
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border-color: var(--stroke-semantic-error, #F04438);
  color: var(--text-semantic-error, #F04438);
}

.error .inputWrapper:has(.input:focus),
.containerError .inputWrapper:has(.input:focus) {
  border-color: var(--stroke-semantic-error, #F04438);
  box-shadow: 0px 0px 0px 4px var(--surface-semantic-error-muted, #FEF3F2);
}

/* Success State */
.success .inputWrapper,
.containerSuccess .inputWrapper {
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border-color: var(--stroke-semantic-success, #17B26A);
  color: var(--text-semantic-success, #17B26A);
}

.success .inputWrapper:has(.input:focus),
.containerSuccess .inputWrapper:has(.input:focus) {
  border-color: var(--stroke-semantic-success, #17B26A);
  box-shadow: 0px 0px 0px 4px var(--surface-semantic-success-muted, #ECFDF3);
}

/* Warning State */
.warning .inputWrapper,
.containerWarning .inputWrapper {
  background: var(--inputfield-static-default-surface, #FFFFFF);
  border-color: var(--stroke-semantic-warning, #F79009);
  color: var(--text-semantic-warning, #F79009);
}

.warning .inputWrapper:has(.input:focus),
.containerWarning .inputWrapper:has(.input:focus) {
  border-color: var(--stroke-semantic-warning, #F79009);
  box-shadow: 0px 0px 0px 4px var(--surface-semantic-warning-muted, #FFFAEB);
}

/* Disabled State */
.disabled .inputWrapper,
.containerDisabled .inputWrapper {
  background: var(--inputfield-static-disabled-surface, #F9FAFB);
  border-color: var(--inputfield-static-disabled-border, #EAECF0);
  color: var(--inputfield-static-disabled-text, #98A2B3);
  cursor: not-allowed;
  pointer-events: none;
}

.disabled .input,
.containerDisabled .input {
  color: var(--inputfield-static-disabled-text, #98A2B3);
  cursor: not-allowed;
  pointer-events: none;
}

.disabled .input::placeholder,
.containerDisabled .input::placeholder {
  color: var(--inputfield-static-disabled-text, #98A2B3);
}

/* =====  ICON STYLES ===== */

.icon {
  color: var(--inputfield-static-default-icon, #344054);
  flex-shrink: 0;
}

.iconLeft {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  width: var(--icon-size-md, 16px);
  height: var(--icon-size-md, 16px);
}

.iconRight {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  width: var(--icon-size-md, 16px);
  height: var(--icon-size-md, 16px);
}

/* Large input icon sizing */
.containerLg .iconLeft {
  width: var(--icon-size-lg, 20px);
  height: var(--icon-size-lg, 20px);
}

.containerLg .iconRight {
  width: var(--icon-size-lg, 20px);
  height: var(--icon-size-lg, 20px);
}

/* Icon state colors */
.error .icon,
.containerError .icon {
  color: var(--icon-semantic-error, #F04438);
}

.success .icon,
.containerSuccess .icon {
  color: var(--icon-semantic-success, #17B26A);
}

.warning .icon,
.containerWarning .icon {
  color: var(--icon-semantic-warning, #F79009);
}

.disabled .icon,
.containerDisabled .icon {
  color: var(--inputfield-static-disabled-icon, #98A2B3);
}

/* =====  LABEL STYLES ===== */

.label {
  display: block;
  margin-bottom: var(--inputfield-divl1-gap, 8px);
  
  /* Typography from tokens */
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: var(--body-size, 14px);
  font-weight: var(--body-weight-semibold, 600);
  color: var(--text-neutral-extreme, #101828);
  line-height: var(--body-lineheight, 1.3229999542236328em);
}

.floatingLabel {
  position: absolute;
  left: var(--inputfield-divl3-horizontal-padding, 16px);
  top: 50%;
  transform: translateY(-50%);
  
  /* Typography from tokens */
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: var(--body-size, 14px);
  font-weight: var(--body-weight-regular, 400);
  color: var(--inputfield-static-default-placeholdertext, #98A2B3);
  
  /* Transitions */
  transition: all var(--transition-fast, 0.2s) ease;
  pointer-events: none;
  z-index: 1;
}

.inputWrapper:has(.input:focus) .floatingLabel,
.inputWrapper:has(.input:not(:placeholder-shown)) .floatingLabel {
  top: calc(var(--inputfield-divl3-vertical-padding, 12px) * -1);
  font-size: calc(var(--body-size, 14px) * 0.75);
  color: var(--inputfield-interactive-border-onfocus, #2E90FA);
  background: var(--inputfield-static-default-surface, #FFFFFF);
  padding: 0 var(--spacing-space-1, 4px);
}

.required {
  color: var(--text-semantic-error, #F04438);
  margin-left: var(--spacing-space-1, 4px);
}

/* =====  MESSAGE STYLES ===== */

.helperText {
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: calc(var(--body-size, 14px) * 0.875);
  color: var(--inputfield-static-default-helptext, #667085);
  line-height: var(--body-lineheight, 1.3229999542236328em);
}

.errorMessage {
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: calc(var(--body-size, 14px) * 0.875);
  color: var(--inputfield-static-default-helptexterror, #F04438);
  line-height: var(--body-lineheight, 1.3229999542236328em);
}

.successMessage {
  font-family: var(--body-fontfamily, 'Red Hat Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
  font-size: calc(var(--body-size, 14px) * 0.875);
  color: var(--text-semantic-success, #17B26A);
  line-height: var(--body-lineheight, 1.3229999542236328em);
}

/* =====  TEXTAREA SPECIFIC STYLES ===== */

.textarea .input {
  resize: vertical;
  min-height: calc(var(--inputfield-height, 44px) * 2 - (var(--inputfield-divl3-vertical-padding, 12px) * 2));
  padding: 0;
  line-height: 1.5;
}

.textarea .inputWrapper,
.textareaContainer .inputWrapper {
  align-items: flex-start;
  min-height: calc(var(--inputfield-height, 44px) * 2);
}

.textarea .contentContainer,
.textareaContainer .contentContainer {
  align-items: flex-start;
}

.characterCount {
  position: absolute;
  bottom: var(--spacing-space-2, 8px);
  right: var(--spacing-space-3, 12px);
  font-size: calc(var(--body-size, 14px) * 0.75);
  color: var(--inputfield-static-default-helptext, #667085);
  background: var(--inputfield-static-default-surface, #FFFFFF);
  padding: 0 var(--spacing-space-1, 4px);
}

/* =====  SEARCH INPUT STYLES ===== */

.searchContainer .inputWrapper {
  position: relative;
}

.clearButton {
  background: none;
  border: none;
  padding: var(--spacing-space-1, 4px);
  cursor: pointer;
  color: var(--icon-neutral-moderate, #667085);
  transition: color var(--transition-fast, 0.2s) ease;
}

.clearButton:hover {
  color: var(--icon-neutral-extreme, #344054);
}

/* =====  PASSWORD INPUT STYLES ===== */

.passwordContainer {
  position: relative;
}

.passwordToggle {
  background: none;
  border: none;
  padding: var(--spacing-space-1, 4px);
  cursor: pointer;
  color: var(--icon-neutral-moderate, #667085);
  transition: color var(--transition-fast, 0.2s) ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.passwordToggle:hover {
  color: var(--icon-neutral-extreme, #344054);
}

.passwordToggle:focus {
  outline: 2px solid var(--focus-primary-layerone-color, #2E90FA);
  outline-offset: 2px;
  border-radius: var(--corners-sm, 4px);
}

/* =====  VERIFICATION INPUT STYLES ===== */

.verificationContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.verificationInputs {
  display: flex;
  gap: var(--inputfield-divl2-gap-otp, 12px);
  align-items: center;
}

.verification .input {
  width: var(--inputfield-divl3-width, 48px);
  height: var(--inputfield-divl3-width, 48px);
  text-align: center;
  border: var(--inputfield-divl3-stroke-thicknessotp, 1px) solid var(--inputfield-static-default-border, #98A2B3);
  border-radius: var(--inputfield-divl3-corner-radiusotp, 4px);
  background: var(--inputfield-static-default-surface, #FFFFFF);
  font-size: var(--body-size, 16px);
  font-weight: var(--body-weight-semibold, 600);
}

.verification .input:focus {
  border-color: var(--inputfield-interactive-border-onfocus, #344054);
  box-shadow: 
    0px 0px 0px 1.5px #FFF,
    0px 0px 0px 3px #2E90FA,
    0px 1px 3px 2px #FFF,
    0px 1px 2px 0px #E9EBED;
}

.verificationSeparator {
  color: var(--text-neutral-moderate, #667085);
  font-weight: var(--body-weight-semibold, 600);
  margin: 0 var(--spacing-space-1, 4px);
}

/* =====  CREDIT CARD INPUT STYLES ===== */

.creditcardContainer .inputWrapper {
  position: relative;
}

.cardIcon {
  position: absolute;
  right: var(--inputfield-divl3-horizontal-padding, 16px);
  top: 50%;
  transform: translateY(-50%);
  color: var(--icon-neutral-moderate, #667085);
}

/* =====  SELECT INPUT STYLES ===== */

.select .inputWrapper {
  cursor: pointer;
  position: relative;
}

.select .input {
  cursor: pointer;
  caret-color: transparent;
}

.selectDropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  z-index: 1000;
  background: var(--surface-neutral-lightsurface, #FFFFFF);
  border: var(--inputfield-divl2-stroke-thickness, 1px) solid var(--inputfield-static-default-border, #EAECF0);
  border-radius: var(--inputfield-divl2-corner-radius, 4px);
  box-shadow: var(--elevation-lowraised-layerone-color, rgba(16, 24, 40, 0.03)) var(--elevation-lowraised-layerone-x, 0px) var(--elevation-lowraised-layerone-y, 4px) var(--elevation-lowraised-layerone-blur, 6px) var(--elevation-lowraised-layerone-spread, -2px);
  max-height: 200px;
  overflow-y: auto;
  margin-top: var(--spacing-space-1, 4px);
}

.selectOption {
  padding: var(--inputfield-divl3-vertical-padding, 12px) var(--inputfield-divl3-horizontal-padding, 16px);
  cursor: pointer;
  color: var(--text-neutral-extreme, #101828);
  transition: background-color var(--transition-fast, 0.2s) ease;
}

.selectOption:hover {
  background: var(--surface-neutral-muted, #F9FAFB);
}

.selectOption.selected {
  background: var(--surface-primary-default, #2E90FA);
  color: var(--text-neutral-ondarkstatus, #FFFFFF);
}

/* =====  CONTAINER STATE CLASSES ===== */

.containerDefault { }
.containerWarning { }
.containerFocus { }
.containerHover { }
.containerError { }
.containerSuccess { }
.containerDisabled { }

/* =====  VARIANT CONTAINERS ===== */

.textContainer { }
.emailContainer { }
.searchContainer { }
.passwordContainer { }
.creditcardContainer { }
.multitextContainer { }
.numberContainer { }
.labelContainer { }
.phoneContainer { }
.currencyContainer { }
.selectContainer { }
.multiselectContainer { }
.datepickerContainer { }
.textareaContainer { }
.verificationContainer { }

/* =====  ACCESSIBILITY ENHANCEMENTS ===== */

@media (prefers-reduced-motion: reduce) {
  .input,
  .inputWrapper,
  .floatingLabel,
  .passwordToggle,
  .clearButton {
    transition: none;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .inputWrapper {
    border-width: 2px;
  }
  
  .input:focus {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
}

/* Focus management for keyboard navigation */
.input:focus-visible {
  outline: none;
}

.passwordToggle:focus-visible,
.clearButton:focus-visible {
  outline: 2px solid var(--focus-primary-layerone-color, #2E90FA);
  outline-offset: 2px;
  border-radius: var(--corners-sm, 4px);
}

/* =====  ANIMATION KEYFRAMES ===== */

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-4px); }
  to { opacity: 1; transform: translateY(0); }
}

.selectDropdown {
  animation: fadeIn var(--transition-fast, 0.2s) ease-out;
}

/* =====  RESPONSIVE DESIGN ===== */

@media (max-width: 768px) {
  .inputLg {
    min-height: calc(var(--inputfield-height, 44px) * 0.875);
    padding: var(--inputfield-divl3-vertical-paddingotp, 10px) calc(var(--inputfield-divl3-horizontal-padding, 16px) * 0.875);
  }
  
  .inputMd {
    min-height: calc(var(--inputfield-height, 44px) * 0.75);
    padding: var(--inputfield-divl3-vertical-paddingotp, 8px) calc(var(--inputfield-divl3-horizontal-padding, 16px) * 0.75);
  }
  
  .verificationInputs {
    gap: calc(var(--inputfield-divl2-gap-otp, 12px) * 0.75);
  }
  
  .verification .input {
    width: calc(var(--inputfield-divl3-width, 48px) * 0.875);
    height: calc(var(--inputfield-divl3-width, 48px) * 0.875);
  }
}
